write.table (file=outInvalidSNPs, errorsTbl)
errorsTbl = data.frame (c("Invalid SNPs: in Phenotype but not in Genotype")
errorsTbl = data.frame (c("Invalid SNPs: in Phenotype but not in Genotype"))
errorsTbl = data.frame (c("Invalid SNPs: in Phenotype but not in Genotype"))
gnTbl = data.frame (gn [,1:3])
errorsTbl = data.frame (c("Invalid SNPs: in Phenotype but not in Genotype"))
for (sn in snps) {
print (sn)
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, sn)
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
write.table (file=outGenotypeGwaspoly, gnTbl)
write.table (file=outInvalidSNPs, errorsTbl)
errorsTbl = as.data.frame (c("Invalid SNPs: in Phenotype but not in Genotype"))
errorsTbl = as.data.frame (c("Invalid SNPs: in Phenotype but not in Genotype"))
for (sn in snps) {
print (sn)
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, data.frame (sn))
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
errorsTbl = as.data.frame (c("Invalid SNPs: in Phenotype but not in Genotype"))
for (sn in snps) {
print (sn)
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, data.frame (sn))
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
errorsTbl = rbind (errorsTbl, data.frame (sn))
errorsTbl = as.data.frame ("Invalid SNPs: in Phenotype but not in Genotype")
errorsTbl
for (sn in snps) {
print (sn)
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, data.frame (sn))
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
sn
gnSnps
sn %in% gnSnps
for (sn in snps) {
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, data.frame (sn))
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
gnSnps = colnames (gn)[-(1:3)]
gnTbl = data.frame (gn [,1:3])
errorsTbl = as.data.frame ("Invalid SNPs: in Phenotype but not in Genotype")
for (sn in snps) {
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, data.frame (sn))
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
errorsTbl = rbind (errorsTbl, data.frame (sn))
print (sprintf (">>> Invalid Snp %s ", sn))
}
}
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = rbind (errorsTbl, data.frame (sn))
}
}
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
#errorsTbl = rbind (errorsTbl, data.frame (sn))
}
}
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = rbind (errorsTbl, data.frame (sn))
}
}
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = rbind (errorsTbl, as.data.frame (sn))
}
}
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = rbind (errorsTbl, as.data.frame (sn))
}
}
errorsTbl
aa = c()
aa = cbind (aa, "1")
aa
aa = cbind (aa, "2")
aa
aa
aa = c()
aa = rbind (aa, "1")
aa
aa = rbind (aa, "2")
aa
errorsTbl = c ("Invalid SNPs: in Phenotype but not in Genotype")
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = rbind (errorsTbl, sn)
}
}
print (gnTbl)
write.table (file=outGenotypeGwaspoly, gnTbl)
write.table (file=outInvalidSNPs, errorsTbl)
write.csv (file=outInvalidSNPs, errorsTbl)
write.csv (file=outInvalidSNPs, errorsTbl)
write.csv (file=outInvalidSNPs, errorsTbl)
print (errorsTbl)
aa = rbind (aa, "2")
aa = "hola"
append (aa, "Bebe")
errorsTbl = c ("Invalid SNPs: in Phenotype but not in Genotype")
for (sn in snps) {
if (sn %in% gnSnps) {
print (sn)
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = append (errorsTbl, sn)
}
}
print (gnTbl)
print (errorsTbl)
write.table (file=outGenotypeGwaspoly, gnTbl)
write.csv (file=outInvalidSNPs, errorsTbl)
write.table (file=outInvalidSNPs, errorsTbl)
errorsTbl
class (errorsTbl)
write.table (file="aa.tbl",append = errorsTbl)
write.table (file="aa.tbl",append = T, errorsTbl)
write.table (file="aa.tbl",append = T, errorsTbl)
write.table (file="aa.tbl", as.vector(aa))
write.table (file="aa.tbl", as.vector(errorsTbl))
write.table (file="aa.tbl", as.vector(errorsTbl),col.names = F, row.names = F)
write.table (file=outInvalidSNPs, errorsTbl, col.names=F,row.names=F)
help ("write.table")
write.table (file=outGenotypeGwaspoly, gnTbl, quote=F)
write.table (file=outGenotypeGwaspoly, gnTbl, quote=F, sep=",")
View(gnTbl)
write.table (file=outGenotypeGwaspoly, gnTbl, quote=F, sep=",", row.names=F)
?gwaspoly
?GWASpoly
help (GWASpoly)
library (GWASpoly)
help (GWASpoly)
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked.tbl"
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
# Populations structure by kinship
data2 <- set.K(data)
params <- set.params(fixed=c("Grp1","Grp2","Grp3","Grp4"),
fixed.type=rep("numeric",4))
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
dim(gn)
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
dim(gn)
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1, pheno.file = phenotypeFile, geno.file = genotypeFile)
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
gn = read.table (genotypeFile, header=T, row.names = 1, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "ACGT", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
#!/usr/bin/Rscript
# Create genotype by checking SNPs in the phenotype file
outGenotypeGwaspoly = "agrosavia-genotype-gwaspoly-checked.tbl"
outInvalidSNPs      = "agrosavia-genotype-gwaspoly-checked.errors"
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T)
snps = as.vector (ph [,1])
head (snps)
snps [1:5]
dim (ph)
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, row.names=F)
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, row.names=F)
getwd()
setwd(sprintf ("%s/other-files", getwd())
setwd(sprintf ("%s/other-files", getwd()))
setwd(sprintf ("%s/other-files", getwd()))
getwd()
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, row.names=F)
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, row.names = F)
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, row.names = 1)
?read.table
dim (ph)
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, sep=",")
dim (ph)
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, sep=",")
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, sep=",")
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, sep=",")
getwd()
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, sep=",")
ph = read.table ("agrosavia-phenotype-gwaspoly.tbl", header=T, sep=",")
snps = as.vector (ph [,1])
head(snps)
tail(snps)
sngn = read.table ("agrosavia-genotype-gwaspoly.tbl", header=T, sep=",")
gnSnps = colnames (gn)[-(1:3)]
head (gnSnps)
head (ph)
gn = read.table ("agrosavia-genotype-gwaspoly.tbl", header=T, sep=",")
gnSnps = colnames (gn)[-(1:3)]
head (gnSnps)
tail (gnSnps)
gnTbl = data.frame (gn [,1:3])
errorsTbl = c ("Invalid SNPs: in Phenotype but not in Genotype")
for (sn in snps) {
if (sn %in% gnSnps) {
gnCol = data.frame (gn [, sn])
colnames (gnCol) = sn
gnTbl = cbind (gnTbl, gnCol)
}else {
print (sprintf (">>> Invalid Snp %s ", sn))
errorsTbl = append (errorsTbl, sn)
}
}
write.table (file=outGenotypeGwaspoly, gnTbl, quote=F, sep=",", row.names=F)
write.table (file=outInvalidSNPs, errorsTbl, col.names=F,row.names=F)
getwd()
??sys
system("cd ..")
getwd()
setwd ("/home/lg/agrosavia/projects/gs-gwaspoly/dev")
getwd()
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly-gota-tmp.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked-tmp.tbl"
ph = read.table (phenotypeFile, header=T, row.names = 1, sep=",")
phenotypeFile = "agrosavia-phenotype-gwaspoly.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked.tbl"
ph = read.table (phenotypeFile, header=T, sep=",")
gn = read.table (genotypeFile, header=T, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
# Populations structure by kinship
data2 <- set.K(data)
params <- set.params(fixed=c("Grp1","Grp2","Grp3","Grp4"),
fixed.type=rep("numeric",4))
# GWAS execution
data3 = GWASpoly(data2, models=c("general","additive","1-dom",
"2-dom"),traits=c("tuber_shape","tuber_eye_depth"),
params=params)
# GWAS execution
data3 = GWASpoly(data2, models=c("general","additive","1-dom",
"2-dom"),traits=c("gota"), params=params)
data2
View(data2)
# Used to include population structure covariates
#params <- set.params(fixed=c("Grp1","Grp2","Grp3","Grp4"),
#                     fixed.type=rep("numeric",4))
params = NULL
# GWAS execution
data3 = GWASpoly(data2, models=c("general","additive","1-dom",
"2-dom"),traits=c("gota"), params=params)
# QQ-plot Output
par(mfrow=c(2,3)) #specifies a 2 x 3 panel
models <- c("additive","general","1-dom-alt","1-dom-ref","2-dom-alt","2-dom-ref")
for (i in 1:6) {
qq.plot(data3,trait="gota",model=models[i])
}
# QTL Detection
data4 = set.threshold (data3, method="Bonferroni",level=0.05)
get.QTL (data4)
# Manhattan plot Output
par(mfrow=c(1,2)) #specifies a 1 x 3 panel
# Manhattan plot Output
par(mfrow=c(1,2)) #specifies a 1 x 3 panel
manhattan.plot (data4, trait="gota", model="additive")
manhattan.plot (data4, trait="gota", model="general")
# Manhattan plot Output
par(mfrow=c(2,3)) #specifies a 1 x 3 panel
for (i in 1:6) {
manhattan.plot (data4, trait="gota", model=models [i])
}
phenotypeFile = "agrosavia-phenotype-gwaspoly.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked.tbl"
ph = read.table (phenotypeFile, header=T, sep=",")
View(ph)
gn = read.table (genotypeFile, header=T, sep=",")
gn = read.table (genotypeFile, header=T, sep=",")
View(gn)
View(gn)
phex = read.table ("example/phenotype-TableS2.tbl")
gnex = read.table ("example/genotype-TableS1 .tbl")
gnex = read.table ("example/genotype-TableS1.tbl")
View(gnex)
View(gnex)
View(phex)
View(phex)
phex = read.table ("example/phenotype-TableS2.tbl", header=T, sep=",")
gnex = read.table ("example/genotype-TableS1.tbl", header=T, sep=",")
AnnShip = read.table ("other-files/potato_infinium_8303_map_context_DM_v3_superscaffolds.txt", header=T, sep=",")
View(AnnShip)
View(AnnShip)
gn = read.table (genotypeFile, header=T, sep="\t")
AnnShip = read.table ("other-files/potato_infinium_8303_map_context_DM_v3_superscaffolds.txt", header=T, sep=",")
AnnShip = read.table ("other-files/potato_infinium_8303_map_context_DM_v3_superscaffolds.txt", header=T, sep="\t")
AnnGeno = read.table ("other-files/potato_8303SNPs_potato_dm_v4.03.gff3", header=T, sep="\t")
View(AnnGeno)
View(AnnGeno)
AnnGeno = read.table ("other-files/potato_8303SNPs_potato_dm_v4.03.gff3", header=F, sep="\t")
library (GWASpoly)
phenotypeFile = "agrosavia-phenotype-gwaspoly.tbl"
genotypeFile  = "agrosavia-genotype-gwaspoly-checked.tbl"
phex = read.table ("example/phenotype-TableS2.tbl", header=T, sep=",")
gnex = read.table ("example/genotype-TableS1.tbl", header=T, sep=",")
AnnShip = read.table ("other-files/potato_infinium_8303_map_context_DM_v3_superscaffolds.txt", header=T, sep="\t")
AnnGeno = read.table ("other-files/potato_8303SNPs_potato_dm_v4.03.gff3", header=F, sep="\t")
ph = read.table (phenotypeFile, header=T, sep=",")
gn = read.table (genotypeFile, header=T, sep=",")
# Read input genotype and genotype
data = read.GWASpoly (ploidy = 4, delim=",", format = "numeric", n.traits = 1,
pheno.file = phenotypeFile, geno.file = genotypeFile)
# Populations structure by kinship
data2 <- set.K(data)
# Used to include population structure covariates
#params <- set.params(fixed=c("Grp1","Grp2","Grp3","Grp4"),
#                     fixed.type=rep("numeric",4))
params = NULL
# GWAS execution
data3 = GWASpoly(data2, models=c("general","additive","1-dom",
"2-dom"),traits=c("gota"), params=params)
# QQ-plot Output
pdf (file="plots-qq-gwaspoly.pdf")
par(mfrow=c(2,3)) #specifies a 2 x 3 panel
models <- c("additive","general","1-dom-alt","1-dom-ref","2-dom-alt","2-dom-ref")
for (i in 1:6) {
qq.plot(data3,trait="gota",model=models[i])
}
dev.off()
# QTL Detection
data4 = set.threshold (data3, method="Bonferroni",level=0.05)
get.QTL (data4)
# Manhattan plot Output
pdf (file="plots-manhattan-gwaspoly.pdf")
par(mfrow=c(2,3)) #specifies a 1 x 3 panel
for (i in 1:6) {
manhattan.plot (data4, trait="gota", model=models [i])
}
dev.off ()
